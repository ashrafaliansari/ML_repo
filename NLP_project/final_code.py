# -*- coding: utf-8 -*-
"""FInal_Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VBLPpp8G48d5a7B7DuMtWHpgUeduScPN

# Student ID: 2310314

**You student_id is your 7/8 digit faser number.**

This is a sample format for CE807-24-SP: Assignment . You must follow the format.
The code will have three broad sections, and additional section, if needed,


1.   Common Codes
2.   Method/model 1 Specific Codes
3.   Method/model 2 Specific Codes
4.   Other Method/model Codes, if any

**You must have `train_gen`, `test_gen` for Generative method  and `train_dis`, `test_dis` for Discriminatuve method to perform full training and testing. This will be evaluated automatically, without this your code will fail and no marked.**

You code should be proverly indended, print as much as possible, follow standard coding (https://peps.python.org/pep-0008/) and documentaion (https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/01.01-Help-And-Documentation.ipynb) practices.

Before each `code block/function`, you must have a `text block` which explain what code block/function is going to do. For each function/class, you need to properly document what are it's input, functionality and output.

If you are using any non-standard library, you must have command to install that, for example `pip install datasets`.

You must print `train`, `validation` and `test` performance measures.

You must also print `train` and `validation` loss in each `epoch`, wherever you are using `epoch`, say in any deep learning algorithms.

Your code must

*   To reproducibality of the results you must use a `seed`, you have to set seed in `torch`, `numpy` etc, use same seed everywhere **and your Student ID should be your seed**.
*   read dataset from './student_id/data/number/', where number is last digit of your student_id folder which will have 3 files [`train.csv`, `val.csv`, `test.csv`]
*   save model after finishing the training in './student_id/Model_Gen/' and './student_id/Model_Dis/' for Generative and Discriminative model respectively.
*   at testing time you will load models from './student_id/Model_Gen/' and './student_id/Model_Dis/'  for Generative and Discriminative model respectively. Your output file based on the test file will be named “test.csv” and you will add/modify “out_label_model_Gen” and “out_label_model_Dis” column in the existing columns from test.csv. These outputs will be generated from your trained models.
*  after testing, your output file will be named “test.csv” and you will add/modify “out_label_model_Gen” and “out_label_model_Dis” column in the existing columns from test.csv. These outputs will be generated from your trained models.




**Install and import all required libraries first before starting to code.**

Let's install all require libraries. For example, `transformers`
"""

!pip install transformers

"""Let's import all require libraries.
For example, `numpy`
"""

import numpy as np
import os
import pickle
import pandas as pd
import torch
from torch.utils.data import Dataset, DataLoader
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from torch import nn, optim
from torch.utils.data import Dataset, DataLoader, TensorDataset
import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
# Download NLTK stopwords if not already downloaded
import nltk

import nltk
nltk.download('wordnet')

"""**Let's put your student id as a variable, that you will use different places**"""

student_id = 2310314 # Note this is an interger and you need to input your id
r = student_id

"""Let's set `seed` for all libraries like `torch`, `numpy` etc as my student id"""

# set same seeds for all libraries

#numpy seed
np.random.seed(student_id)

"""# Common Codes

In this section you will write all common codes, for examples


*   Data read
*   Command Line argument reading
*   Performance Matrics
*   Print Dataset Statistics
*   Saving model and output
*   Loading Model and output
*   etc

**Let's first allow the GDrive access and set data and model paths**

For examples,

student_id = 12345670

set GOOGLE_DRIVE_PATH_AFTER_MYDRIVE = ‘./CE807-24-SP/Lab10/’ in your GDrive

now set all global variable,


Sample output directory and file structure: https://drive.google.com/drive/folders/1okgSzgGiwPYYFp7NScEt9MNVolOlld1d?usp=share_link
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

# Add your code to initialize GDrive and data and models paths

GOOGLE_DRIVE_PATH_AFTER_MYDRIVE = './CE807-24-SP/Assignment/2310314'
GOOGLE_DRIVE_PATH = os.path.join('gdrive', 'MyDrive', GOOGLE_DRIVE_PATH_AFTER_MYDRIVE)
print('List files: ', os.listdir(GOOGLE_DRIVE_PATH))

DATA_PATH = os.path.join(GOOGLE_DRIVE_PATH, '4') # Make sure to replace 0 with last digit of your student Regitration number
train_file = os.path.join(DATA_PATH, 'train.csv')
print('Train file: ', train_file)

val_file = os.path.join(DATA_PATH, 'valid.csv')
print('Validation file: ', val_file)

test_file = os.path.join(DATA_PATH, 'test.csv')
print('Test file: ', test_file)


MODEL_PATH = os.path.join(GOOGLE_DRIVE_PATH, 'model', str(student_id)) # Make sure to use your student Regitration number
MODEL_Gen_DIRECTORY = os.path.join(MODEL_PATH, 'Model_Gen') # Model Generative directory
print('Model Generative directory: ', MODEL_Gen_DIRECTORY)

MODEL_Gen_File = MODEL_Gen_DIRECTORY + '.zip'


MODEL_Dis_DIRECTORY = os.path.join(MODEL_PATH, 'Model_Dis') # Model Discriminative directory
print('Model Discriminative directory: ', MODEL_Dis_DIRECTORY)

MODEL_Dis_File = MODEL_Dis_DIRECTORY + '.zip'

"""Let's see train file"""

train_df = pd.read_csv(train_file)
train_df['toxicity'].value_counts()



"""Let's show you a sample output file. Notice all fields, `out_label` is your model's output for that `tweet` and `id`

We are going to use different performance matrics like Accuracy, Recall (macro), Precision (macro), F1 (macro) and Confusion Matrix for the performance evaluation. We will print all the matrics and display Confusion Matrix with proper X & Y axis labels
"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

def compute_performance(y_true, y_pred):
    """
    prints different performance matrics like  Accuracy, Recall (macro), Precision (macro), and F1 (macro).
    This also display Confusion Matrix with proper X & Y axis labels.
    Also, returns F1 score

    Args:
        y_true: numpy array or list
        y_pred: numpy array or list


    Returns:
        float
    """

    ##########################################################################
    #                     TODO: Implement this function                      #
    ##########################################################################
    # Replace "pass" statement with your code
    f1_score = f1_score(y_true, y_pred, average='macro')
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    accuracy = accuracy_score(y_test, y_pred)
    ##########################################################################
    #                            END OF YOUR CODE                            #
    ##########################################################################
    return f1_score,precision,recall,accuracy

import os
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from torchvision.datasets import MNIST

input_size = 1000  # TODO: Get this from the train dataset
hidden_size = 128  # Adjust as needed
latent_size = 16 # TODO: Get this from the train dataset
def save_model(model,model_dir):
  # save the model to disk
  # Check if the Model directory exists

  # Note you might have to modify this based on your requirement

  if not os.path.exists(model_dir):
      # Create the directory if it doesn't exist
      os.makedirs(model_dir)
      print(f"Directory '{model_dir}' created successfully.")
  else:
      print(f"Directory '{model_dir}' already exists.")

  model_file = os.path.join(model_dir, 'vae_model.pkl')
  pickle.dump(model, open(model_file, 'wb'))

  print('Saved model to ', model_file)

  return model_file

def save_model_gen(model, model_dir):
    """
    Save the model to the specified directory.

    Args:
        model (torch.nn.Module): The model to be saved.
        model_dir (str): The directory path where the model will be saved.

    Returns:
        str: The filename of the saved model.
    """
    os.makedirs(model_dir, exist_ok=True)
    model_file = os.path.join(model_dir, 'gen_model.pt')
    torch.save(model, model_file)
    print('Saved model to ', model_file)
    return model_file

def load_model(model_file):
    # load model from disk
    # Note you might have to modify this based on your requirement
    with open(model_file, 'rb') as f:
        model_state_dict = pickle.load(f)

    return model_state_dict

def load_model_gen(model_class, model_path, input_size, hidden_size, output_size):
    model = model_class(input_size, hidden_size, output_size)
    model.load_state_dict(torch.load(model_path))
    return model

"""# Let's download GDrive Link into a directory"""

import requests

def extract_file_id_from_url(url):
    # Extract the file ID from the URL
    file_id = None
    if 'drive.google.com' in url:
        file_id = url.split('/')[-2]
    elif 'https://docs.google.com' in url:
        file_id = url.split('/')[-1]

    return file_id

def download_file_from_drive(file_id, file_path):
    # Construct the download URL
    download_url = f"https://drive.google.com/uc?id={file_id}"

    # Download the file
    response = requests.get(download_url)
    if response.status_code == 200:
        with open(file_path, 'wb') as f:
            f.write(response.content)
        print("File downloaded successfully!",file_path)
    else:
        print("Failed to download the file.")

def download_zip_file_from_link(file_url,file_path):

  file_id = extract_file_id_from_url(file_url)
  if file_id:
      download_file_from_drive(file_id, file_path)
  else:
      print("Invalid Google Drive URL.")

"""# Zip and Unzip a GDrive File"""

import zipfile
import shutil
import os

# Function to zip a directory
def zip_directory(directory, zip_filename, compression=zipfile.ZIP_DEFLATED):
    with zipfile.ZipFile(zip_filename, 'w', compression) as zipf:
        for root, dirs, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                # Example: Exclude files with certain extensions
                if file.endswith('.txt'):
                    zipf.write(file_path, os.path.relpath(file_path, directory))
        print('Created a zip file', zip_filename)

# Function to unzip a zip file
def unzip_file(zip_filename, extract_dir):
    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)
    print('Extracted a zip file to',extract_dir)

# Example usage:
# directory_to_zip = MODEL_Gen_DIRECTORY
# zip_filename = MODEL_Gen_File

# # # Zip the directory
# zip_directory(directory_to_zip, zip_filename)

# # Unzip the zip file
# extract_dir = 'path/to/extract'
# unzip_file(zip_filename, extract_dir)

"""# Get Sharable link of your Zip file in Gdrive"""

!pip install -U -q PyDrive

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials


def get_gdrive_link(file_path):
    # Authenticate and create PyDrive client
    auth.authenticate_user()
    gauth = GoogleAuth()
    gauth.credentials = GoogleCredentials.get_application_default()
    drive = GoogleDrive(gauth)

    # Find the file in Google Drive
    file_name = file_path.split('/')[-1]
    file_list = drive.ListFile({'q': f"title='{file_name}'"}).GetList()

    # Get the file ID and generate the shareable link
    if file_list:
        file_id = file_list[0]['id']
        gdrive_link = f"https://drive.google.com/file/d/{file_id}/view?usp=sharing"
        return gdrive_link
    else:
        return "File not found in Google Drive"

def get_shareable_link(url):

    file_id = extract_file_id_from_url(url)

    auth.authenticate_user()
    gauth = GoogleAuth()
    gauth.credentials = GoogleCredentials.get_application_default()
    drive = GoogleDrive(gauth)

    try:
        file_obj = drive.CreateFile({'id': file_id})
        file_obj.FetchMetadata()
        file_obj.InsertPermission({
            'type': 'anyone',
            'value': 'anyone',
            'role': 'reader'
        })

        # Get the shareable link
        return file_obj['alternateLink']
    except Exception as e:
        print("Error:", e)
        return None

# if __name__ == "__main__":
#     # Replace 'YOUR_FILE_ID' with the ID of the file you want to share
#     file_id = 'YOUR_FILE_ID'
#     shareable_link = get_shareable_link(file_id)
#     if shareable_link:
#         print("Shareable link:", shareable_link)
#     else:
#         print("Failed to generate shareable link.")

"""##Text Preprocessing Comon Functions"""

# Data Cleaner Function
import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
# Download NLTK stopwords if not already downloaded
import nltk
nltk.download('stopwords')
nltk.download('punkt')
custom_words =[
'sdata','newlinetoken','edata'
]
# Data preprocessing
stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

def preprocess_text(text):
    tokens = word_tokenize(text.lower())  # Tokenization and lowercase
    tokens = [lemmatizer.lemmatize(token) for token in tokens if token.isalpha()]  # Lemmatization and remove non-alphabetic tokens
    tokens = [token for token in tokens if token not in stop_words]  # Remove stopwords
    return ' '.join(tokens)

def remove_words(words, custom_words):
    # Initialize an empty list to store non-matching words
    remaining_words = []

    # Iterate through each word in the list
    for word in words:
        # Check if any of the substrings exist in the word
        if not any(custom_word in word for custom_word in custom_words):
            # If none of the substrings are present, add the word to the list of remaining words
            remaining_words.append(word)

    return remaining_words
def clean_text(text):
    # Convert to lowercase
    text = text.lower()
    # Remove special characters, punctuation, and numbers
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    # Tokenize the text
    tokens = word_tokenize(text)
    # Remove stopwords
    tokens = [lemmatizer.lemmatize(token) for token in tokens if token.isalpha()]
    stop_words = set(stopwords.words('english'))
    filtered_tokens = [token for token in tokens if token not in stop_words]
    filtered_words = remove_words(filtered_tokens,custom_words)
    # Join the filtered tokens back into a string
    cleaned_text = ' '.join(filtered_words)
    return cleaned_text

"""# Method Generative Start

In this section you will write all details of your Method 1.

You will have to enter multiple `code` and `text` cell.

Your code should follow the standard ML pipeline


*   Data reading
*   Data clearning, if any
*   Convert data to vector/tokenization/vectorization
*   Model Declaration/Initialization/building
*   Training and validation of the model using training and validation dataset
*   Save the trained model
*   Load and Test the model on testing set
*   Save the output of the model


You could add any other step(s) based on your method's requirement.

After finishing the above, you need to usd splited data as defined in the assignment and then do the same for all 4 sets. Your code should not be copy-pasted 4 time, make use of `function`.

## Training Generative Method Code
Your test code should be a stand alone code that must take `train_file`, `val_file`,  and `model_dir` as input. You could have other things as also input, but these three are must. You would load both files, and train using the `train_file` and validating using the `val_file`. You will `print` / `display`/ `plot` all performance metrics, loss(if available) and save the output model in the `model_dir`.

Note that at the testing time, you need to use the same pre-processing and model. So, it would be good that you make those as seperate function/pipeline whichever it the best suited for your method. Don't copy-paste same code twice, make it a fucntion/class whichever is best.
"""

import numpy
from sklearn.feature_extraction.text import CountVectorizer
train_df['comment_cleaned'] =train_df['comment'].apply(clean_text)  # Add cleaned text as a new column
count_vectorizer = CountVectorizer(stop_words='english',max_features=5000)
train_values = count_vectorizer.fit_transform(train_df['comment_cleaned'].values)
train_labels = train_df['toxicity'].values

import torch

if torch.cuda.is_available():
  device = torch.device("cuda")
else:
  device = torch.device("cpu")
device

import torch.optim as optim
import torch
import torch.nn as nn
import torch.nn.functional as F

class VAE(nn.Module):
      def __init__(self, input_size, hidden_size, latent_size):
          super(VAE, self).__init__()
          self.input_size = input_size
          self.hidden_size = hidden_size
          self.latent_size = latent_size

          # Encoder layers
          self.fc1 = nn.Linear(input_size, hidden_size)
          self.fc21 = nn.Linear(hidden_size, latent_size)
          self.fc22 = nn.Linear(hidden_size, latent_size)

          # Decoder layers
          self.fc3 = nn.Linear(latent_size, hidden_size)
          self.fc4 = nn.Linear(hidden_size, input_size)

      def encode(self, x):
          h1 = F.relu(self.fc1(x))
          return self.fc21(h1), self.fc22(h1)

      def reparameterize(self, mu, logvar):
          std = torch.exp(0.5 * logvar)
          eps = torch.randn_like(std)
          return mu + eps * std

      def decode(self, z):
          h3 = F.relu(self.fc3(z))
          return torch.sigmoid(self.fc4(h3))

      def forward(self, x):
          mu, logvar = self.encode(x.view(-1, self.input_size))
          z = self.reparameterize(mu, logvar)
          return self.decode(z), mu, logvar

      def load_state_dict(self, state_dict):
          self.load_state_dict(state_dict)

def train_Gen(train_file, val_file, model_dir):
    """
    Takes train_file, val_file and model_dir as input.
    It trained on the train_file datapoints, and validate on the val_file datapoints.
    While training and validating, it print different evaluataion metrics and losses, wheverever necessary.
    After finishing the training, it saved the best model in the model_dir.

    ADD Other arguments, if needed.

    Args:
        train_file: Train file name
        val_file: Validation file name
        model_dir: Model output Directory



    """

    ##########################################################################
    #                     TODO: Implement this function                      #
    ##########################################################################
    # Replace "pass" statement with your code
    class VAE(nn.Module):
      def __init__(self, input_size, hidden_size, latent_size):
          super(VAE, self).__init__()
          self.input_size = input_size
          self.hidden_size = hidden_size
          self.latent_size = latent_size

          # Encoder layers
          self.fc1 = nn.Linear(input_size, hidden_size)
          self.fc21 = nn.Linear(hidden_size, latent_size)
          self.fc22 = nn.Linear(hidden_size, latent_size)

          # Decoder layers
          self.fc3 = nn.Linear(latent_size, hidden_size)
          self.fc4 = nn.Linear(hidden_size, input_size)

      def encode(self, x):
          h1 = F.relu(self.fc1(x))
          return self.fc21(h1), self.fc22(h1)

      def reparameterize(self, mu, logvar):
          std = torch.exp(0.5 * logvar)
          eps = torch.randn_like(std)
          return mu + eps * std

      def decode(self, z):
          h3 = F.relu(self.fc3(z))
          return torch.sigmoid(self.fc4(h3))

      def forward(self, x):
          mu, logvar = self.encode(x.view(-1, self.input_size))
          z = self.reparameterize(mu, logvar)
          return self.decode(z), mu, logvar
      def load_state_dict(self, state_dict):
          self.load_state_dict(state_dict)

    def prepare_dataset(file_path, sample_flag=False,count_vectorizer=None):
          # Prepare the data
        # file_path = os.path.join(PATH, file_name)
        data = pd.read_csv(file_path)
        data['comment_cleaned'] =data['comment'].apply(clean_text)
        if count_vectorizer == None:
          count_vectorizer = CountVectorizer(stop_words='english',max_features=5000)
          values = count_vectorizer.fit_transform(data['comment_cleaned'].values) #TODO: This is the best way to do this, because you need to use same vectorization menthod
        else:
          values = count_vectorizer.transform(data['comment_cleaned'].values)
        labels = data['toxicity'].values
          # #Future Use:
          # input_size =len(data[0][0])
          # output_size =len(set(data[:, 1]))
          # Convert into Tensor
        values = torch.tensor(values.toarray()).float()
        labels = torch.tensor(labels)

        dataset = TensorDataset(values, labels)
        input_size = values.shape[1]
        return dataset, input_size, count_vectorizer

    ##########################################################################
    #                            END OF YOUR CODE                            #
    ##########################################################################
    train_dataset, input_size, count_vectorizer = prepare_dataset(train_file,sample_flag=True)
    batch_size = 64
    shuffle = True
    # Instantiate a DataLoader
    train_loader = DataLoader(train_dataset, batch_size=batch_size,shuffle=shuffle) # In training always make shuffle True
    # Define loss using a predefined loss function
    loss_function = nn.CrossEntropyLoss()
    # Number of Epochs
    epochs = 5
    input_size = input_size  # TODO: Get this from the train dataset
    hidden_size = 128  # Adjust as needed
    latent_size = 16 # TODO: Get this from the train dataset

    vae_model = VAE(input_size=input_size, hidden_size=hidden_size, latent_size=latent_size)
    vae_model = vae_model.to(device)
    # Define the optimizer
    lr = 3e-4
    optimizer = optim.Adam(vae_model.parameters(), lr=lr)
    # Define the loss function for VAE
    def vae_loss(recon_x, x, mu, logvar):
        # Reconstruction loss (binary cross-entropy)
        recon_loss = F.binary_cross_entropy(recon_x, x.view(-1, input_size), reduction='sum')

        # KL divergence loss
        kld_loss = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())

        return recon_loss + kld_loss
    val_loss = 0
    best_train_loss = float('inf')
    # Training loop
    for epoch in range(epochs):
        vae_model.train()
        train_loss = 0

        for batch_idx, (data, _) in enumerate(train_loader):
            data = data.to(device)

            # Normalize input data between 0 and 1
            data_normalized = (data - data.min()) / (data.max() - data.min())

            optimizer.zero_grad()
            recon_batch, mu, logvar = vae_model(data_normalized)

            # Compute the reconstruction loss
            recon_loss = loss_function(recon_batch, data_normalized)

            # Compute the KL divergence loss
            kl_divergence_loss = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())

            # Total loss
            loss = recon_loss + kl_divergence_loss

            loss.backward()
            train_loss += loss.item()
            optimizer.step()
            if val_loss < best_train_loss:
              best_val_loss = val_loss
              best_model = vae_model.state_dict()

        print(f'Epoch {epoch + 1}, Loss: {train_loss / len(train_loader.dataset)}')
        best_model = vae_model.state_dict()
    #Saving the Model
    MODEL_Gen_File = save_model(best_model,MODEL_Gen_DIRECTORY)

    # Now Zip Model to share it
    zip_directory(model_dir, MODEL_Gen_File)

    model_gdrive_link = get_gdrive_link(MODEL_Gen_File)

    print(model_gdrive_link)
    get_shareable_link(model_gdrive_link)

    return model_gdrive_link

"""## Testing Method 1 Code
Your test code should be a stand alone code that must take `test_file`, `model_file` and `output_dir` as input. You could have other things as also input, but these three are must. You would load both files, and generate output based on inputs. Then you will `print` / `display`/ `plot` all performance metrics, and save the output file in the `output_dir`  
"""

def test_Gen(test_file, MODEL_PATH,model_gdrive_link):
    """
    take test_file, model_file and output_dir as input.
    It loads model and test of the examples in the test_file.
    It prints different evaluation metrics, and saves the output in output directory

    ADD Other arguments, if needed

    Args:
        test_file: test file name
        model_gdrive_link: GDrive URL
        MODEL_PATH: Directory of Model

    """
    # These two are temporary directory and file
    test_model_file = MODEL_PATH+'/test.zip'
    test_model_path = MODEL_PATH+'/test/'
    # Now download and unzip the model file
    download_zip_file_from_link(model_gdrive_link,test_model_file)
    print('Model downloaded to', test_model_file)
    unzip_file(test_model_file, test_model_path)
    print('\n Model is downloaded to ',test_model_path)
    # Let's get test data
    test_df = pd.read_csv(test_file)
    print('\n Data is loaded from ', test_file)
    # Now save the model output in the same test file
    # Let's get the model file name & load it
    # Note you have to use the same name as you used in the save
    test_model_file = os.path.join(MODEL_PATH, 'Model_Gen', 'gen_model.pth')
    model_state_dict = load_model_gen(test_model_file)
    # Instantiate the model and load the state dictionary
    vae_model = VAE()
    vae_model.load_state_dict(model_state_dict)
    #Process the test data
    test_df['comment_cleaned'] =test_df['comment'].apply(clean_text)
    count_vectorizer = CountVectorizer(stop_words='english',max_features=5000)
    values = count_vectorizer.fit_transform(test_df['comment_cleaned'].values)
    input_tensor = torch.tensor(values).float()
    # Let's do the prediction using test data
    y_pred = vae_model.predict(input_tensor['comment'])
    # Note the name of output column, this is for the discriminative model
    test_df['out_label_model_Gen'] = y_pred
    # Now save the model output in the same output file
    test_df.to_csv(test_file, index=False)
    print('\n Output is save in ', test_file)
    ##########################################################################
    #                     TODO: Implement this function                      #
    ##########################################################################
    # Replace "pass" statement with your code
    ##########################################################################
    #                            END OF YOUR CODE                            #
    ##########################################################################
    return

"""## Method Generative End

# Method Discriminative Start

In this section you will write all details of your Method 2.

You will have to enter multiple `code` and `text` cell.

Your code should follow the standard ML pipeline


*   Data reading
*   Data clearning, if any
*   Convert data to vector/tokenization/vectorization
*   Model Declaration/Initialization/building
*   Training and validation of the model using training and validation dataset
*   Save the trained model
*   Load and Test the model on testing set
*   Save the output of the model

You could add any other step(s) based on your method's requirement.

After finishing the above, you need to usd splited data as defined in the assignment and then do the same for all 4 sets. Your code should not be copy-pasted 4 time, make use of `function`.

## Training Method Discriminative Code
Your test code should be a stand alone code that must take `train_file`, `val_file`,  and `model_dir` as input. You could have other things as also input, but these three are must. You would load both files, and train using the `train_file` and validating using the `val_file`. You will `print` / `display`/ `plot` all performance metrics, loss(if available) and save the output model in the `model_dir`.

Note that at the testing time, you need to use the same pre-processing and model. So, it would be good that you make those as seperate function/pipeline whichever it the best suited for your method. Don't copy-paste same code twice, make it a fucntion/class whichever is best.
"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import RandomForestClassifier
from sklearn.metrics import accuracy_score
def train_dis(train_file, val_file, model_dir):
    """
    Takes train_file, val_file and model_dir as input.
    It trained on the train_file datapoints, and validate on the val_file datapoints.
    While training and validating, it print different evaluataion metrics and losses, wheverever necessary.
    After finishing the training, it saved the best model in the model_dir.

    ADD Other arguments, if needed.

    Args:
        train_file: Train file name
        val_file: Validation file name
        model_dir: Model output Directory

    """

    ##########################################################################
    #                     TODO: Implement this function                      #
    ##########################################################################
    # Replace "pass" statement with your code
    # Model is working fine, so save model
    # Note modify this with your code

# Split Data
    X_train, X_test, y_train, y_test = train_test_split(train_values, train_labels, test_size=0.2, random_state=r)

    # 3. Instantiate and Train Random Forest Model
    random_forest = RandomForestClassifier(n_estimators=100, random_state=42)
    random_forest.fit(X_train, y_train)

    # 4. Predict
    y_pred = random_forest.predict(X_test)

# You can also compute other evaluation metrics like precision, recall, and F1-score

    MODEL_Dis_File = save_model(random_forest,MODEL_Dis_DIRECTORY)

    # Now Zip Model to share it
    zip_directory(model_dir, MODEL_Dis_File)

    model_gdrive_link = get_gdrive_link(MODEL_Dis_File)

    print(model_gdrive_link)
    get_shareable_link(model_gdrive_link)

    ##########################################################################
    #                            END OF YOUR CODE                            #
    ##########################################################################
    return model_gdrive_link

# model_gdrive_link = train_dis(train_file, val_file, MODEL_Dis_DIRECTORY)

"""## Testing Method Discriminative Code
Your test code should be a stand alone code that must take `test_file`, `model_file` and `output_dir` as input. You could have other things as also input, but these three are must. You would load both files, and generate output based on inputs. Then you will `print` / `display`/ `plot` all performance metrics, and save the output file in the `output_dir`  
"""

def test_dis(test_file, model_gdrive_link):
    """
    take test_file, model_file and output_dir as input.
    It loads model and test of the examples in the test_file.
    It prints different evaluation metrics, and saves the output in output directory

    ADD Other arguments, if needed

    Args:
        test_file: test file name
        model_gdrive_link: Google Drive link for the model file

    """
    print('\n Start by downloading model')
    # First Get model from the link
    # model_gdrive_link = get_gdrive_link(model_file)

    # These two are temporary directory and file
    test_model_file = MODEL_PATH+'/test.zip'
    test_model_path = MODEL_PATH+'/test/'

    # Now download and unzip the model file
    download_zip_file_from_link(model_gdrive_link,test_model_file)
    unzip_file(test_model_file, test_model_path)
    print('\n Model is downloaded to ',test_model_path)

    ##########################################################################
    #                     TODO: Implement this function                      #
    ##########################################################################

    # Let's get test data
    test_df = pd.read_csv('gdrive/MyDrive/./CE807-24-SP/Assignment/2310314/4/test.csv')
    print('\n Data is loaded from ', test_file)

    # Let's get the model file name & load it
    # Note you have to use the same name as you used in the save

    test_model_file = os.path.join(test_model_path, 'Model_Dis', 'model.sav')

    model = load_model(test_model_file)

    # Let's do the prediction using test data
    y_pred = model.predict(test_df['comment'])

    # Now save the model output in the same test file
    # Note the name of the output column, this is for the discriminative model
    test_df['out_label_model_Dis'] = y_pred

    # Now save the model output in the same output file
    test_df.to_csv(test_file, index=False)
    print('\n Output is saved in ', test_file)

    ##########################################################################
    #                            END OF YOUR CODE                            #
    ##########################################################################
    return test_file

"""## Discriminative Method  End

# Other Method/model Start
"""

import argparse

# Define argparse-like function
def parse_arguments(option):
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--option', '-o',  type=str, default=option, help='Description of your option.')
    args = parser.parse_args(args=[])
    return args

# Function to perform some action based on selected option
def perform_action(option):
    print("Performing action with option:", option)

    if option == '0':
      print('\n Okay Exiting!!! ')

    elif option == '1':
      print('\n Training Generative Model')
      model_gdrive_link = train_Gen(train_file,val_file,MODEL_Gen_DIRECTORY)
      print('Make sure to pass model URL in Testing',model_gdrive_link)

    elif option == '2':
      print('\n\n Pass the URL Not Variable !!!')
      print('\n Testing Generative Model')
      model_gen_url = 'https://drive.google.com/file/d/1-1MWVRcg1wGM8nwI-G_Eiu9nwpxCz-b2/view?usp=sharing'
      test_Gen(test_file, MODEL_PATH,model_gen_url)

    elif option == '3':
      print('\n Training Disciminative Model')
      model_gdrive_link = train_dis(train_file,val_file,MODEL_Dis_DIRECTORY)
      print('Make sure to pass model URL in Testing',model_gdrive_link)
      print('\n\n Pass the URL Not Variable !!!')

    elif option == '4':
      print('\n\n Pass the URL Not Variable !!!')
      print('\n Testing Disciminative Model')
      model_dis_url = 'https://drive.google.com/file/d/1-G8gg8CMwYGXbEsIhkB5GuT7ljg7Dzm4/view?usp=sharing'
      test_dis(test_file, model_dis_url)

    else:
      print('Wrong Option Selected. \n\nPlease select Correct option')
      main()


def main():

    # Get option from user input
    user_option = input("0. To Exit Code\n"
                     "1. Train Model Generative\n"
                    "2. Test Model Generative\n"
                    "3. Train Model Discriminative\n"
                    "4. Test Model Discriminative\n"
                    "Enter your option: ")

    args = parse_arguments(user_option)
    option = args.option
    perform_action(option)



main()

main()

